import fs from 'fs';
import path from 'path';

const targetPath = process.argv[2];

if (!targetPath) {
  console.error('경로가 입력되지 않았습니다.');
  process.exit(1);
}

const baseDir = 'src';
const targetDir = path.join(baseDir, targetPath);

if (!fs.existsSync(targetDir) || !fs.statSync(targetDir).isDirectory()) {
  console.error(`지정된 디렉토리가 존재하지 않습니다: ${targetDir}`);
  process.exit(1);
}

fs.writeFileSync(
  path.join(targetDir, 'index.ts'),
  '// Generated by TypeScript Script\n\n',
);

const processFiles = (dir: string, prefix: string) => {
  const files = fs
    .readdirSync(dir)
    .filter((file) => file.endsWith('.ts') || file.endsWith('.tsx'))
    .filter((file) => file !== 'index.ts');

  for (const file of files) {
    const filePath = path.join(dir, file);
    const filename = path.basename(filePath, path.extname(filePath));

    const normalExports = getNormalExports(filePath);
    const typeExports = getTypeExports(filePath);

    if (normalExports.length > 0) {
      fs.appendFileSync(
        path.join(targetDir, 'index.ts'),
        `export { ${normalExports.join(', ')} } from '${prefix}${filename}';\n`,
      );
    }

    if (typeExports.length > 0) {
      fs.appendFileSync(
        path.join(targetDir, 'index.ts'),
        `export type { ${typeExports.join(
          ', ',
        )} } from '${prefix}${filename}';\n`,
      );
    }
  }
};

const getNormalExports = (filePath: string): string[] => {
  const fileContent = fs.readFileSync(filePath, 'utf-8');
  const regex = /^export (const|let|var|function|class|enum) ([a-zA-Z0-9_]+)/gm;
  const matches = [];
  let match;
  while ((match = regex.exec(fileContent)) !== null) {
    matches.push(match[2]);
  }
  return matches.filter((exportItem) => !exportItem.startsWith('_'));
};

const getTypeExports = (filePath: string): string[] => {
  const fileContent = fs.readFileSync(filePath, 'utf-8');
  const regex = /^export (type|interface) ([a-zA-Z0-9_]+)/gm;
  const matches: string[] = [];
  let match;

  while ((match = regex.exec(fileContent)) !== null) {
    if (!match[2].startsWith('_')) {
      matches.push(match[2]);
    }
  }

  return matches;
};

const subDirs = fs
  .readdirSync(targetDir)
  .filter((file) => fs.statSync(path.join(targetDir, file)).isDirectory());

if (subDirs.length > 0) {
  console.log('하위 디렉토리 모듈을 export 합니다.');
  for (const subDir of subDirs) {
    console.log(`Processing ${subDir}...`);
    processFiles(path.join(targetDir, subDir), `./${subDir}/`);
  }
} else {
  console.log(
    '하위 디렉토리가 존재하지 않아 입력된 디렉토리 내부 모듈을 export 합니다.',
  );
  console.log(`Processing ${targetDir}...`);
  processFiles(targetDir, './');
}

console.log(`모든 export 문이 ${targetDir}/index.ts 파일에 추가되었습니다.`);
